name: mcp-lambda-ecr-apps
run-name: ${{ github.event_name }} on ${{ github.ref_name }} by @${{ github.actor }} inputs ${{ github.event.inputs.environment }} ${{ github.event.inputs.action }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply

env:
  AWS_REGION: "ap-northeast-1"
  TF_VERSION: "1.11.4"
  TF_WORKING_DIR: "./services/mcp-lambda-ecr"
  PROJECT_NAME: "mcp-lambda-ecr" # Makefile内でも使っているのでここで定義

permissions:
  id-token: write
  contents: read

jobs:
  plan_apply_apps:
    name: "Plan/Apply Apps"
    runs-on: ubuntu-24.04-arm
    environment: ${{ github.event.inputs.environment }}
    strategy:
      fail-fast: false
      matrix:
        app_name:
          - mcp-client
          - mcp-server-example

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.MCP_LAMBDA_ECR_TERRAFORM_IAM }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.TF_WORKING_DIR }}/lambdas/${{ matrix.app_name }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}-${{ matrix.app_name }}:${{ github.sha }}
          provenance: false
          # GHAをキャッシュバックエンドとして利用
          cache-from: type=gha,scope=${{ github.workflow }}-${{ matrix.app_name }}-${{ github.event.inputs.environment }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ matrix.app_name }}-${{ github.event.inputs.environment }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Plan for Lambda
        id: tf_plan
        env:
          # Makefileに渡す変数を設定
          TF_BACKEND_S3_BUCKET: ${{ secrets.TF_BACKEND_S3_BUCKET }}
          APP_NAME: ${{ matrix.app_name }}
          ENV: ${{ github.event.inputs.environment }}
          # build-and-pushステップの出力をimage_uriとして渡す
          TF_ARGS: "-var=image_uri=@${{ steps.build-and-push.outputs.digest }}"
        run: |
          # Makefileの 'plan' ターゲットを直接呼び出すが、変数を上書きする
          make -C ${{ env.TF_WORKING_DIR }} lambda-plan \
            APP_NAME=${{ env.APP_NAME }} \
            ENV=${{ env.ENV }} \
            LAMBDA_ARGS="${{ env.TF_ARGS }}"

      - name: Terraform Apply for Lambda
        if: github.event.inputs.action == 'apply'
        env:
          TF_BACKEND_S3_BUCKET: ${{ secrets.TF_BACKEND_S3_BUCKET }}
          APP_NAME: ${{ matrix.app_name }}
          ENV: ${{ github.event.inputs.environment }}
        run: |
          # ビルドとプッシュは既に行われているため、Makefileの 'apply' ターゲットを直接呼び出す
          # 注意：lambda-apply は内部で ecr-build-push を呼び出すので、
          # 本来は Makefile 側を修正するのが望ましいが、今回は apply ターゲットを直接呼び出す
          make -C ${{ env.TF_WORKING_DIR }} apply \
            TARGET_DIR=lambdas/$(APP_NAME) \
            PLAN_FILE_ARGS="lambdas/$(APP_NAME)/plan.tfplan"
