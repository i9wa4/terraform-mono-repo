name: hands-on-lambda-ecr-push-image
run-name: ${{ github.event_name }} on ${{ github.ref_name }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: "ap-northeast-1"
  ECR_REPOSITORY_BASE_NAME: "hands-on-lambda-ecr" # Base name, env suffix will be added
  LAMBDA_APP_NAME: "hello-world" # Name of the application/lambda
  TF_WORKING_DIR: "./services/hands-on-lambda-ecr"
  # Ensure this secret is defined in your GitHub repository settings for Makefile's ecr-login if common infra isn't always present
  # TF_BACKEND_S3_BUCKET: ${{ secrets.TF_BACKEND_S3_BUCKET_NAME }} 

permissions:
  id-token: write # For aws-actions/configure-aws-credentials
  contents: read   # For actions/checkout

jobs:
  build_and_push_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # This job assumes the ECR repository already exists.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.HANDS_ON_LAMBDA_ECR_ARN_IAM_OIDC }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          # Construct the full ECR repository name as expected by the lambda's ECR resource
          # PROJECT_NAME-ENV-APP_NAME, e.g., hands-on-lambda-ecr-dev-hello-world
          TARGET_ECR_REPOSITORY_NAME: "${{ env.ECR_REPOSITORY_BASE_NAME }}-${{ github.event.inputs.environment }}-${{ env.LAMBDA_APP_NAME }}"
          # APP_ROOT_DIR is the Docker build context directory relative to the Makefile
          APP_ROOT_DIR_MAKEFILE: "lambdas/${{ env.LAMBDA_APP_NAME }}"
          # Variables for Makefile
          ENV: ${{ github.event.inputs.environment }}
          PROJECT_NAME: ${{ env.ECR_REPOSITORY_BASE_NAME }} # Makefile uses PROJECT_NAME
          APP_NAME: ${{ env.LAMBDA_APP_NAME }} # Makefile uses APP_NAME
        run: |
          # ECR_IMAGE_URI is the variable expected by 'make ecr-build-push'
          # Format: <registry>/<repository_name>:<tag>
          export ECR_IMAGE_URI="${ECR_REGISTRY_URL}/${TARGET_ECR_REPOSITORY_NAME}:${IMAGE_TAG}"
          
          # APP_ROOT_DIR is also expected by 'make ecr-build-push'
          export APP_ROOT_DIR="${APP_ROOT_DIR_MAKEFILE}"

          echo "ECR_IMAGE_URI: ${ECR_IMAGE_URI}"
          echo "APP_ROOT_DIR: ${APP_ROOT_DIR}"
          
          # Call the Makefile target
          # AWS_REGION is already in job env. ECR_REGISTRY is used by ecr-build-push via ECR_IMAGE_URI.
          # AWS_ACCOUNT_ID might be needed by ecr-login if called by make, ensure credentials provide it or set it.
          make ecr-build-push
        working-directory: ${{ env.TF_WORKING_DIR }}
