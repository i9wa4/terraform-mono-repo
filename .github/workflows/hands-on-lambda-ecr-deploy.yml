name: hands-on-lambda-ecr-deploy
run-name: ${{ github.event_name }} on ${{ github.ref_name }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g., dev, prod)'
        required: true
        default: 'dev'
        type: string

env:
  AWS_REGION: "ap-northeast-1"
  ECR_REPOSITORY_BASE_NAME: "hands-on-lambda-ecr" # Base name, env suffix will be added
  LAMBDA_FUNCTION_BASE_NAME: "hello-world-python-container" # Base name, env suffix will be added
  TF_VERSION: "1.11.4" # Terraformのバージョンを固定 (例: "1.8.4")

permissions:
  id-token: write
  contents: read

jobs:
  # 1. ECRリポジトリと基本的なIAMロールを作成するジョブ
  provision_ecr_and_iam:
    name: Provision ECR Repository and IAM Role
    runs-on: ubuntu-latest
    env:
      # Define environment-specific names and paths
      CURRENT_ECR_REPOSITORY_NAME: ${{ env.ECR_REPOSITORY_BASE_NAME }}-${{ github.event.inputs.environment }}
      CURRENT_LAMBDA_FUNCTION_NAME: ${{ env.LAMBDA_FUNCTION_BASE_NAME }}-${{ github.event.inputs.environment }}
      TF_WORKING_DIR: ./services/hands-on-lambda-ecr/${{ github.event.inputs.environment }}/terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.HANDS_ON_LAMBDA_ECR_ARN_IAM_OIDC }} # User might need to make this env-specific
          aws-region: ${{ env.AWS_REGION }}

      # Login to ECR is not needed for this job's specific terraform targets
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init (ECR and IAM)
        run: make tf-init ENVIRONMENT=${{ github.event.inputs.environment }}
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply (ECR and IAM)
        env:
          TF_LOG: "DEBUG" # Makefile target should consume this if needed
        run: |
          make tf-apply-iam \
            ECR_REPOSITORY_NAME="${{ env.CURRENT_ECR_REPOSITORY_NAME }}" \
            LAMBDA_FUNCTION_NAME="${{ env.CURRENT_LAMBDA_FUNCTION_NAME }}" \
            ENVIRONMENT="${{ github.event.inputs.environment }}" \
            TF_LOG="${{ env.TF_LOG }}"
        working-directory: ${{ env.TF_WORKING_DIR }}

  # 2. Lambda関数など残りのインフラをデプロイするジョブ
  deploy_lambda:
    name: Deploy Lambda Function with Terraform
    runs-on: ubuntu-latest
    needs: provision_ecr_and_iam # Depends on ECR/IAM provisioning
    env:
      # Define environment-specific names and paths
      CURRENT_ECR_REPOSITORY_NAME: ${{ env.ECR_REPOSITORY_BASE_NAME }}-${{ github.event.inputs.environment }}
      CURRENT_LAMBDA_FUNCTION_NAME: ${{ env.LAMBDA_FUNCTION_BASE_NAME }}-${{ github.event.inputs.environment }}
      TF_WORKING_DIR: ./services/hands-on-lambda-ecr/${{ github.event.inputs.environment }}/terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.HANDS_ON_LAMBDA_ECR_ARN_IAM_OIDC }} # User might need to make this env-specific
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr # This step is crucial for getting the ECR registry
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: make tf-init ENVIRONMENT=${{ github.event.inputs.environment }}
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: make tf-validate ENVIRONMENT=${{ github.event.inputs.environment }}
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply (Lambda and rest)
        run: |
          make tf-apply-lambda \
            ECR_IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.CURRENT_ECR_REPOSITORY_NAME }}:${{ github.sha }}" \
            ECR_REPOSITORY_NAME="${{ env.CURRENT_ECR_REPOSITORY_NAME }}" \
            LAMBDA_FUNCTION_NAME="${{ env.CURRENT_LAMBDA_FUNCTION_NAME }}" \
            ENVIRONMENT="${{ github.event.inputs.environment }}"
        working-directory: ${{ env.TF_WORKING_DIR }}
