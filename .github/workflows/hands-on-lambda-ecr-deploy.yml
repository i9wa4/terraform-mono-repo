name: hands-on-lambda-ecr-deploy
run-name: ${{ github.event_name }} on ${{ github.ref_name }} by @${{ github.actor }}

on:
  workflow_dispatch:

env:
  AWS_REGION: "ap-northeast-1"
  ECR_REPOSITORY_NAME: "hands-on-lambda-ecr"
  LAMBDA_FUNCTION_NAME: "hello-world-python-container"
  TF_VERSION: "1.11.4" # Terraformのバージョンを固定 (例: "1.8.4")

permissions:
  id-token: write
  contents: read

jobs:
  # 1. ECRリポジトリと基本的なIAMロールを作成するジョブ
  provision_ecr_and_iam:
    name: Provision ECR Repository and IAM Role
    runs-on: ubuntu-latest
    outputs:
      # 次のジョブで必要であればリポジトリ名などを渡せる
      ecr_repository_name: ${{ env.ECR_REPOSITORY_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.HANDS_ON_LAMBDA_ECR_ARN_IAM_OIDC }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init (ECR and IAM)
        run: terraform init
        working-directory: ./services/hands-on-lambda-ecr/terraform # Terraformファイルのパス

      - name: Terraform Apply (ECR and IAM)
        run: |
          terraform apply -auto-approve -no-color \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="ecr_repository_name=${{ env.ECR_REPOSITORY_NAME }}" \
            -var="lambda_function_name=${{ env.LAMBDA_FUNCTION_NAME }}" \
            -target=aws_ecr_repository.app_ecr_repo \
            -target=aws_iam_role.lambda_exec_role \
            -target=aws_iam_policy.lambda_exec_policy \
            -target=aws_iam_role_policy_attachment.lambda_exec_policy_attachment
        # CloudWatch Log GroupはLambda関数に直接紐づくため、ここではターゲットに含めず
        # 最後のLambdaデプロイジョブで一緒に作成されるようにします。
        # もし事前に作成したい場合はターゲットに追加しても構いません。
        # -target=aws_cloudwatch_log_group.lambda_log_group
        working-directory: ./services/hands-on-lambda-ecr/terraform

  # 2. DockerイメージをビルドしてECRにプッシュするジョブ
  build_and_push_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: provision_ecr_and_iam # ECRリポジトリ作成ジョブに依存
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.HANDS_ON_LAMBDA_ECR_ARN_IAM_OIDC }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # ECR_REPOSITORY_NAMEは env から取得
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./services/hands-on-lambda-ecr/app # Dockerfileのあるディレクトリ
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # 3. Lambda関数など残りのインフラをデプロイするジョブ
  deploy_lambda:
    name: Deploy Lambda Function with Terraform
    runs-on: ubuntu-latest
    needs: build_and_push_image # イメージビルド＆プッシュジョブに依存
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.HANDS_ON_LAMBDA_ECR_ARN_IAM_OIDC }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./services/hands-on-lambda-ecr/terraform

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ./services/hands-on-lambda-ecr/terraform

      - name: Terraform Apply (Lambda and rest)
        run: |
          terraform apply -auto-approve -no-color \
            -var="ecr_image_uri=${{ needs.build_and_push_image.outputs.image_uri }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="ecr_repository_name=${{ env.ECR_REPOSITORY_NAME }}" \
            -var="lambda_function_name=${{ env.LAMBDA_FUNCTION_NAME }}"
        working-directory: ./services/hands-on-lambda-ecr/terraform
